from srdt_analysis.data import get_data
from srdt_analysis.models import DocumentsList
from srdt_analysis.llm import get_extended_data
from srdt_analysis.save import save_to_csv, process_document
from srdt_analysis.vector import generate_vector
from datetime import datetime


def exploit_data():
    result = get_data()
    # exploit_articles_code_du_travail(result[0])
    exploit_articles_code_du_travail([result[0][0]])
    # exploit_fiches_mt(result[1])
    exploit_fiches_mt([result[1][0]])
    # exploit_fiches_sp(result[2])
    exploit_fiches_sp([result[2][0]])
    # exploit_page_infos(result[3])
    exploit_page_infos([result[3][0]])
    # exploit_page_contribs(result[4])
    exploit_page_contribs([result[4][0]])


def exploit_articles_code_du_travail(data: DocumentsList):
    results = []
    print(f"Number of articles to be processed: {len(data)}")
    for doc in data:
        print(f"[{datetime.now().strftime('%H:%M:%S')}] Processing article: {doc.title}")
        summary = get_extended_data(doc.text, True)
        keywords = get_extended_data(doc.text, False)
        doc_data = process_document(
            cdtn_id=doc.cdtn_id,
            initial_id=doc.initial_id,
            title=doc.title,
            content=doc.text,
            keywords=keywords,
            summary=summary,
            vector_summary=generate_vector(summary),
            vector_keywords=generate_vector(keywords),
        )
        print(
            f"[{datetime.now().strftime('%H:%M:%S')}] Article number {data.index(doc) + 1} out of {len(data)} processed"
        )
        results.append(doc_data)
    save_to_csv(results, "articles_code_du_travail.csv")
    return results


def exploit_fiches_mt(data: DocumentsList):
    results = []
    print(f"Number of articles to be processed: {len(data)}")
    for doc in data:
        print(f"[{datetime.now().strftime('%H:%M:%S')}] Processing article: {doc.title}")
        concatenated_html = ""
        sections = doc.document.get("sections", [])
        for section in sections:
            concatenated_html += section.get("html", "")
        summary = get_extended_data(concatenated_html, True)
        keywords = get_extended_data(concatenated_html, False)
        doc_data = process_document(
            cdtn_id=doc.cdtn_id,
            initial_id=doc.initial_id,
            title=doc.title,
            content=concatenated_html,
            keywords=keywords,
            summary=summary,
            vector_summary=generate_vector(summary),
            vector_keywords=generate_vector(keywords),
        )
        print(
            f"[{datetime.now().strftime('%H:%M:%S')}] Article number {data.index(doc) + 1} out of {len(data)} processed"
        )
        results.append(doc_data)
    save_to_csv(results, "fiches_mt.csv")
    return results


def exploit_fiches_sp(data: DocumentsList):
    results = []
    print(f"Number of articles to be processed: {len(data)}")
    for doc in data:
        print(f"[{datetime.now().strftime('%H:%M:%S')}] Processing article: {doc.title}")
        content = doc.document.get("raw", "")
        summary = get_extended_data(content, True)
        keywords = get_extended_data(content, False)
        doc_data = process_document(
            cdtn_id=doc.cdtn_id,
            initial_id=doc.initial_id,
            title=doc.title,
            content=content,
            keywords=keywords,
            summary=summary,
            vector_summary=generate_vector(summary),
            vector_keywords=generate_vector(keywords),
        )
        print(
            f"[{datetime.now().strftime('%H:%M:%S')}] Article number {data.index(doc) + 1} out of {len(data)} processed"
        )
        results.append(doc_data)
    save_to_csv(results, "fiches_sp.csv")
    return results


def exploit_page_infos(data: DocumentsList):
    results = []
    print(f"Number of articles to be processed: {len(data)}")
    for doc in data:
        print(f"[{datetime.now().strftime('%H:%M:%S')}] Processing article: {doc.title}")
        concatenated_markdown = ""
        contents = doc.document.get("contents", [])
        for content in contents:
            blocks = content.get("blocks", [])
            for block in blocks:
                if block.get("type") == "markdown":
                    concatenated_markdown += block.get("markdown", "")
        summary = get_extended_data(concatenated_markdown, True)
        keywords = get_extended_data(concatenated_markdown, False)
        doc_data = process_document(
            cdtn_id=doc.cdtn_id,
            initial_id=doc.initial_id,
            title=doc.title,
            content=concatenated_markdown,
            keywords=keywords,
            summary=summary,
            vector_summary=generate_vector(summary),
            vector_keywords=generate_vector(keywords),
        )
        print(
            f"[{datetime.now().strftime('%H:%M:%S')}] Article number {data.index(doc) + 1} out of {len(data)} processed"
        )
        results.append(doc_data)
    save_to_csv(results, "page_infos.csv")
    return results


def exploit_page_contribs(data: DocumentsList):
    results = []
    print(f"Number of articles to be processed: {len(data)}")
    for doc in data:
        print(f"[{datetime.now().strftime('%H:%M:%S')}] Processing article: {doc.title}")
        content = doc.document.get("content", "")
        summary = get_extended_data(content, True)
        keywords = get_extended_data(content, False)
        doc_data = process_document(
            cdtn_id=doc.cdtn_id,
            initial_id=doc.initial_id,
            title=doc.title,
            content=content,
            keywords=keywords,
            summary=summary,
            vector_summary=generate_vector(summary),
            vector_keywords=generate_vector(keywords),
            idcc=doc.document.get("idcc", "0000"),
        )
        print(
            f"[{datetime.now().strftime('%H:%M:%S')}] Article number {data.index(doc) + 1} out of {len(data)} processed"
        )
        results.append(doc_data)
    save_to_csv(results, "page_contribs.csv")
    return results
