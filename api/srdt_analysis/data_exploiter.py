from srdt_analysis.chunker import Chunker
from srdt_analysis.collections import AlbertCollectionHandler
from srdt_analysis.constants import BASE_URL_CDTN
from srdt_analysis.logger import Logger
from srdt_analysis.models import (
    ChunkerContentType,
    CollectionName,
    Document,
    DocumentData,
    DocumentsList,
    FormattedTextContent,
    ResultProcessDocumentType,
)


class BaseDataExploiter:
    def __init__(self):
        self.chunker = Chunker()
        self.collections = AlbertCollectionHandler()
        self.logger = Logger("BaseDataExploiter")

    def get_content(self, _doc: Document) -> FormattedTextContent:
        raise NotImplementedError("Subclasses should implement this method")

    def process_documents(
        self,
        data: DocumentsList,
        collection_name: CollectionName,
        chunker_content_type: ChunkerContentType,
    ) -> ResultProcessDocumentType:
        results: list[DocumentData] = []
        for doc in data:
            content = self.get_content(doc)
            chunks = self.chunker.split(content, chunker_content_type)
            doc_data = self.create_document_data(doc, content, chunks, collection_name)
            results.append(doc_data)
        id = self.collections.create(collection_name)
        self.logger.info(
            f"Uploading {len(results)} documents from {collection_name} in collection_id {id}"
        )
        self.collections.upload(results, id)
        return {"documents": results, "id": id}

    def create_document_data(self, doc, content, content_chunked, collection_name: CollectionName) -> DocumentData:
        doc_data = {
            "cdtn_id": doc.cdtn_id,
            "initial_id": doc.initial_id,
            "title": doc.title,
            "content": content,
            "content_chunked": content_chunked,
            "url": BASE_URL_CDTN
            + "/"
            + self._get_path_from_collection_name(doc.source)
            + "/"
            + doc.slug,
            "source": doc.source,
            "idcc": None,
        }
        
        # Extract IDCC for contributions_idcc collections
        if collection_name == "contributions_idcc" and doc.document and "idcc" in doc.document:
            doc_data["idcc"] = doc.document["idcc"]
            
        return doc_data

    def _get_path_from_collection_name(self, collection_name: CollectionName) -> str:
        mapping: dict[CollectionName, str] = {
            "code_du_travail": "code-du-travail",
            "fiches_service_public": "fiche-service-public",
            "page_fiche_ministere_travail": "fiche-ministere-travail",
            "information": "information",
            "contributions": "contributions",
            "contributions_idcc": "contributions-idcc",
        }
        return mapping[collection_name]


class ArticlesCodeDuTravailExploiter(BaseDataExploiter):
    def get_content(self, doc: Document) -> FormattedTextContent:
        return doc.text


class FichesMTExploiter(BaseDataExploiter):
    def get_content(self, doc: Document) -> FormattedTextContent:
        return "".join(
            section.get("html", "") for section in doc.document.get("sections", [])
        )


class FichesSPExploiter(BaseDataExploiter):
    def get_content(self, doc: Document) -> FormattedTextContent:
        return doc.text


class PageInfosExploiter(BaseDataExploiter):
    def get_content(self, doc: Document) -> FormattedTextContent:
        markdown = ""
        for content in doc.document.get("contents", []):
            for block in content.get("blocks", []):
                if block.get("type") == "markdown":
                    markdown += block.get("markdown", "")
        return markdown


class PagesContributionsExploiter(BaseDataExploiter):
    def get_content(self, doc: Document) -> FormattedTextContent:
        return doc.document["content"]
